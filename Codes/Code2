import sys
import os
from PyQt6.QtWidgets import (
    QApplication,
    QMainWindow,
    QVBoxLayout,
    QWidget,
    QPushButton,
    QFileDialog,
    QLabel,
    QTextEdit,
    QTabWidget,
    QFormLayout,
    QLineEdit,
    QListWidget,
    QMessageBox,
)
from PyQt6.QtCore import Qt

class FileEditorApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Редактор файлов Telegram бота")
        self.setGeometry(100, 100, 800, 600)

        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)

        self.create_file_scan_tab()
        self.create_edit_file_tab()
        self.create_data_form_tab()
        self.create_read_data_tab()

        self.tabs.addTab(self.file_scan_tab, "Сканирование папки")
        self.tabs.addTab(self.edit_file_tab, "Редактирование файла")
        self.tabs.addTab(self.data_form_tab, "Форма ввода данных")
        self.tabs.addTab(self.read_data_tab, "Чтение данных")

        self.current_file_path = ""

    def create_file_scan_tab(self):
        self.file_scan_tab = QWidget()
        layout = QVBoxLayout()

        self.folder_path = QLineEdit()
        self.folder_path.setPlaceholderText("Введите путь к папке...")
        self.scan_button = QPushButton("Сканировать папку")
        self.scan_button.clicked.connect(self.scan_folder)

        self.file_list = QListWidget()
        self.file_list.itemClicked.connect(self.load_file_content)

        layout.addWidget(self.folder_path)
        layout.addWidget(self.scan_button)
        layout.addWidget(self.file_list)

        self.file_scan_tab.setLayout(layout)

    def scan_folder(self):
        folder = self.folder_path.text()
        if os.path.isdir(folder):
            self.file_list.clear()
            for filename in os.listdir(folder):
                if filename.endswith(".py"):  # Например, фильтрация по .py файлами
                    self.file_list.addItem(filename)
        else:
            QMessageBox.warning(self, "Ошибка", "Указанный путь не является папкой!")

    def load_file_content(self, item):
        self.current_file_path = os.path.join(self.folder_path.text(), item.text())
        with open(self.current_file_path, 'r', encoding='utf-8') as file:
            content = file.read()
            self.edit_file_text.setPlainText(content)

    def create_edit_file_tab(self):
        self.edit_file_tab = QWidget()
        layout = QVBoxLayout()

        self.edit_file_text = QTextEdit()
        self.edit_file_text.setPlaceholderText("Здесь будет содержимое файла...")
        self.save_button = QPushButton("Сохранить изменения")
        self.save_button.clicked.connect(self.save_file)

        layout.addWidget(self.edit_file_text)
        layout.addWidget(self.save_button)

        self.edit_file_tab.setLayout(layout)

    def save_file(self):
        if self.current_file_path:
            with open(self.current_file_path, 'w', encoding='utf-8') as file:
                content = self.edit_file_text.toPlainText()
                file.write(content)
                QMessageBox.information(self, "Успех", "Изменения сохранены!")
        else:
            QMessageBox.warning(self, "Ошибка", "Сначала выберите файл для редактирования!")

    def create_data_form_tab(self):
        self.data_form_tab = QWidget()
        layout = QFormLayout()

        self.api_key_input = QLineEdit()
        self.api_key_input.setPlaceholderText("Введите API ключ")
        layout.addRow("API ключ:", self.api_key_input)

        self.submit_button = QPushButton("Сохранить данные")
        self.submit_button.clicked.connect(self.save_form_data)
        layout.addWidget(self.submit_button)

        self.data_form_tab.setLayout(layout)

    def save_form_data(self):
        api_key = self.api_key_input.text()
        # Здесь можно сохранить или обработать данные API ключа
        QMessageBox.information(self, "Успех", "Данные сохранены!")

    def create_read_data_tab(self):
        self.read_data_tab = QWidget()
        layout = QVBoxLayout()

        self.read_data_text = QTextEdit()
        self.read_data_text.setReadOnly(True)
        layout.addWidget(self.read_data_text)

        self.load_data_button = QPushButton("Загрузить данные")
        self.load_data_button.clicked.connect(self.load_data)

        layout.addWidget(self.load_data_button)

        self.read_data_tab.setLayout(layout)

    def load_data(self):
        # Здесь вы можете реализовать функционал загрузки данных для чтения
        self.read_data_text.append("Здесь будут ваши данные!")  # Пример

if __name__ == "__main__":
    app = QApplication(sys.argv)
    editor = FileEditorApp()
    editor.show()
    sys.exit(app.exec())
