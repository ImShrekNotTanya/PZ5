import logging
import random
from telegram import Update, ForceReply
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
words_list = []
hangman_words = ['—Å–æ–±–∞–∫–∞', '–∫–æ—à–∫–∞', '—Å–ª–æ–Ω', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–ª–µ—Ç–æ', '–¥–æ–∂–¥—å', '—Å–æ–ª–Ω—Ü–µ', '–∑–≤–µ–∑–¥–∞']
random_sentences = [
    "–°–∫–∞–∑–∫–∞ ‚Äî —ç—Ç–æ —è–≤—å.",
    "–ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ ‚Äî —ç—Ç–æ –≤—Å–µ–ª–µ–Ω–Ω–∞—è.",
    "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –∫–∞–∫ –≤–µ–ª–∏–∫–∞—è —Ä–µ–∫–∞.",
    "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reply_keyboard = [
        ['üìÑ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞', 'üéÆ –ò–≥—Ä–∞ –≤ –≤–∏—Å–µ–ª–∏—Ü—É'],
        ['üìù –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']
    ]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –∏–≥—Ä–∞—Ç—å –≤ –≤–∏—Å–µ–ª–∏—Ü—É. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
                                    reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
async def read_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global words_list
    document = update.message.document
    file = await document.get_file()
    file_path = f"files/{document.file_name}"
    await file.download_to_drive(file_path)

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await update.message.reply_text(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n<pre>{content}</pre>", parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –≤ –≤–∏—Å–µ–ª–∏—Ü—É (—Ç–∞–∫ —Å–µ–±–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å)
async def hangman_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global hangman_words
    word_to_guess = random.choice(hangman_words)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã –≤–∏—Å–µ–ª–∏—Ü–∞
    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –≤ –≤–∏—Å–µ–ª–∏—Ü—É! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {word_to_guess}.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async def random_sentence(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    sentence = random.choice(random_sentences)
    await update.message.reply_text(f"–°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {sentence}")


def main() -> None:
    application = ApplicationBuilder().token("7898062819:AAGl5eNzuOpX6tT3yyX7-eo_rmBJ6zHFyyU").build() # –í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ Who_Wants_To_Play

    # –ú–µ–Ω—é –±–æ—Ç–∞
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.Regex("üìÑ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"), read_file))
    application.add_handler(MessageHandler(filters.Regex("üéÆ –ò–≥—Ä–∞ –≤ –≤–∏—Å–µ–ª–∏—Ü—É"), hangman_game))
    application.add_handler(MessageHandler(filters.Regex("üìù –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"), random_sentence))

    application.run_polling()

# –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞
if __name__ == '__main__':
    main()
